swagger: "2.0"
info:
  description: "CV Server"
  version: "1.0.0"
  title: "Swagger CV"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "vnmntn@gmail.com"
  license:
    name: "BSD-3-Clause"
    url: "https://opensource.org/licenses/BSD-3-Clause"
host: "api.vnmntn.com"
basePath: "/v1"
tags:
  - name: "CV"
    description: |
      Computer vision tasks include methods for acquiring, processing, analyzing and understanding digital images,
      and extraction of high-dimensional data from the real world in order to produce numerical or symbolic information,
      e.g. in the forms of decisions.
      Understanding in this context means the transformation of visual images (the input of the retina)
      into descriptions of the world that make sense to thought processes and can elicit appropriate action.
      This image understanding can be seen as the disentangling of symbolic information
      from image data using models constructed with the aid of geometry, physics, statistics, and learning theory.
    externalDocs:
      description: "Find out more"
      url: "http://git.vnmntn.com/vnmntn/vision"
schemes:
  - "http"
paths:
  /sign-up:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "Create new user"
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "New user object"
          required: true
          schema:
            $ref: "#/definitions/SignUpRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TokenResponse"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /sign-in:
    post:
      tags:
        - "user"
      summary: "Auth user"
      description: "This can only be done by the logged in user."
      operationId: "signInUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/SignInRequest"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/TokenResponse"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /crypto:
    post:
      tags:
        - crypto
      summary: "Upload crypto data"
      description: ""
      operationId: "postCrypto"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Crypto data"
          required: true
          schema:
            type: "array"
            $ref: "#/definitions/CryptoRequest"
      responses:
        "405":
          description: "Invalid input"

    get:
      tags:
        - crypto
      summary: "Search Crypto by query"
      description: "All params is required"
      operationId: "getCrypto"
      produces:
        - "application/json"
      parameters:
        - name: "symbol"
          in: "query"
          description: "symbol of cryptocurrencies"
          required: true
          type: "string"
          example: "BTC/USD"
        - name: "start_date"
          in: "query"
          description: "start for filter"
          required: true
          type: "string"
          example: "2020-01-01"
        - name: "end_date"
          in: "query"
          description: "end for filter"
          required: true
          type: "string"
          example: "2021-01-01"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CryptoResponse"
        "400":
          description: "Invalid status value"

  /fields:
    get:
      tags:
        - crypto
      summary: "Get crypto fields with type double"
      description: "All params is required"
      operationId: "getFields"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WorkflowResponse"
        "400":
          description: "Invalid status value"

  /workflow:
    get:
      tags:
        - crypto
      summary: "Search similarity"
      description: "All params is required"
      operationId: ""
      produces:
        - "application/json"
      parameters:
        - name: "symbol"
          in: "query"
          description: "symbol of cryptocurrencies"
          required: true
          type: "string"
          example: "BTC/USD"
        - name: "start_date"
          in: "query"
          description: "start for filter"
          required: true
          type: "string"
          example: "2020-01-01"
        - name: "end_date"
          in: "query"
          description: "end for filter"
          required: true
          type: "string"
          example: "2021-01-01"
        - name: "field_name"
          in: "query"
          description: "target field for search similarity"
          required: true
          type: "string"
          example: "open"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WorkflowResponse"
        "400":
          description: "Invalid status value"

definitions:
  CryptoRequest:
    type: "object"
    properties:
      unix:
        type: "uint64"
        example: 1
      datetime:
        type: "string"
        example: "2020-01-01"
      symbol:
        type: "string"
        example: "BTC/USD"
      open:
        type: "double"
        example: 0.11
      high:
        type: "double"
        example: 0.11
      low:
        type: "double"
        example: 0.11
      close:
        type: "double"
        example: 0.11
      volume_original:
        type: "double"
        example: 0.11
      volume_usd:
        type: "double"
        example: 0.11

  CryptoResponse:
    type: "object"
    properties:
      datetime:
        type: "string"
        example: "2020-01-01"
      open:
        type: "double"
        example: 0.11
      high:
        type: "double"
        example: 0.11
      low:
        type: "double"
        example: 0.11
      close:
        type: "double"
        example: 0.11

  FieldsResponse:
    type: "object"
    properties:
      table_name:
        type: "string"
        example: "table_name"
      column_name:
        type: "string"
        example: "column_name"
      data_type:
        type: "string"
        example: "data_type"

  SignUpRequest:
    type: "object"
    properties:
      username:
        type: "string"
        example: "example"
      email:
        type: "string"
        example: "example@mail.com"
      password:
        type: "string"
        example: "password"

  SignInRequest:
    type: "object"
    properties:
      username:
        type: "string"
        example: "example"
      password:
        type: "string"
        example: "password"

  WorkflowResponse:
    type: "object"
    properties:
      datetime:
        type: "string"
        example: "2020-01-01"
      target:
        type: "double"
        example: "0.11"

  TokenResponse:
    type: "object"
    properties:
      token:
        type: "string"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
